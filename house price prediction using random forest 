{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.13",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 5407,
          "databundleVersionId": 868283,
          "sourceType": "competition"
        }
      ],
      "dockerImageVersionId": 30698,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "name": "notebook48e5dc99ed",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rayaproluaditya/multivaraible-linear-regression/blob/main/house%20price%20prediction%20using%20random%20forest%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "\n",
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n",
        "# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "import os\n",
        "import sys\n",
        "from tempfile import NamedTemporaryFile\n",
        "from urllib.request import urlopen\n",
        "from urllib.parse import unquote, urlparse\n",
        "from urllib.error import HTTPError\n",
        "from zipfile import ZipFile\n",
        "import tarfile\n",
        "import shutil\n",
        "\n",
        "CHUNK_SIZE = 40960\n",
        "DATA_SOURCE_MAPPING = 'house-prices-advanced-regression-techniques:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-competitions-data%2Fkaggle-v2%2F5407%2F868283%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240505%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240505T095140Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D66caf0d5c808a5245bfb79b5c69423b55ad043647cb703264b4e3547e8b6391f46abd25af85dfdb7e44a92735bd9fdc110c985c335f2a675bcc6d45fd9c5aa3f6aa70b0b856b3d7b56dca1a800ad7ceeb3080a4183d678e8a7347351a1a0bfa941f76470732e6813b30d827896f31c63378af35bf30d820d4abca4c7d88c9c05a495126e8d4992e982496a4bd0133bb6eeb1c1f9fcf1627f3b711eb0850cd98a1fec49da2ca38ce8bc18adb9c72cc922a4e54634f74d4bd3f9082f4220121e5487e9c736d80a17402728b774021aa458bbcd7829d6df49275728550dbb19494c5a0898ad7fadb79d37bb87f2bb5aeb3ab257d22dacf618e704934a104b99a6e5'\n",
        "\n",
        "KAGGLE_INPUT_PATH='/kaggle/input'\n",
        "KAGGLE_WORKING_PATH='/kaggle/working'\n",
        "KAGGLE_SYMLINK='kaggle'\n",
        "\n",
        "!umount /kaggle/input/ 2> /dev/null\n",
        "shutil.rmtree('/kaggle/input', ignore_errors=True)\n",
        "os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n",
        "os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n",
        "\n",
        "try:\n",
        "  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "try:\n",
        "  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "\n",
        "for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n",
        "    directory, download_url_encoded = data_source_mapping.split(':')\n",
        "    download_url = unquote(download_url_encoded)\n",
        "    filename = urlparse(download_url).path\n",
        "    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n",
        "    try:\n",
        "        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n",
        "            total_length = fileres.headers['content-length']\n",
        "            print(f'Downloading {directory}, {total_length} bytes compressed')\n",
        "            dl = 0\n",
        "            data = fileres.read(CHUNK_SIZE)\n",
        "            while len(data) > 0:\n",
        "                dl += len(data)\n",
        "                tfile.write(data)\n",
        "                done = int(50 * dl / int(total_length))\n",
        "                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n",
        "                sys.stdout.flush()\n",
        "                data = fileres.read(CHUNK_SIZE)\n",
        "            if filename.endswith('.zip'):\n",
        "              with ZipFile(tfile) as zfile:\n",
        "                zfile.extractall(destination_path)\n",
        "            else:\n",
        "              with tarfile.open(tfile.name) as tarfile:\n",
        "                tarfile.extractall(destination_path)\n",
        "            print(f'\\nDownloaded and uncompressed: {directory}')\n",
        "    except HTTPError as e:\n",
        "        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n",
        "        continue\n",
        "    except OSError as e:\n",
        "        print(f'Failed to load {download_url} to path {destination_path}')\n",
        "        continue\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "098L4onmKpw2",
        "outputId": "86976bc3-913d-4d10-95c0-4763636cc664"
      },
      "cell_type": "code",
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading house-prices-advanced-regression-techniques, 203809 bytes compressed\n",
            "[==================================================] 203809 bytes downloaded\n",
            "Downloaded and uncompressed: house-prices-advanced-regression-techniques\n",
            "Data source import complete.\n"
          ]
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "code",
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directoryimport os\n",
        " # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "execution": {
          "iopub.status.busy": "2024-05-05T06:12:11.528492Z",
          "iopub.execute_input": "2024-05-05T06:12:11.529238Z",
          "iopub.status.idle": "2024-05-05T06:12:11.534602Z",
          "shell.execute_reply.started": "2024-05-05T06:12:11.529202Z",
          "shell.execute_reply": "2024-05-05T06:12:11.533283Z"
        },
        "trusted": true,
        "id": "VEBWHfuLKpw7"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df= pd.read_csv(\"sample_submission.csv\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-05-05T06:16:25.936885Z",
          "iopub.execute_input": "2024-05-05T06:16:25.937256Z",
          "iopub.status.idle": "2024-05-05T06:16:26.108118Z",
          "shell.execute_reply.started": "2024-05-05T06:16:25.93723Z",
          "shell.execute_reply": "2024-05-05T06:16:26.106409Z"
        },
        "trusted": true,
        "id": "fRT6HTO5Kpw7"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df. tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "BKBWbCEyKpw8",
        "outputId": "79dbb381-7b1f-4903-d159-ad9c5e31199f"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Id      SalePrice\n",
              "1454  2915  167081.220949\n",
              "1455  2916  164788.778231\n",
              "1456  2917  219222.423400\n",
              "1457  2918  184924.279659\n",
              "1458  2919  187741.866657"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-299d6921-53a8-4f17-8273-deacad350243\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1454</th>\n",
              "      <td>2915</td>\n",
              "      <td>167081.220949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1455</th>\n",
              "      <td>2916</td>\n",
              "      <td>164788.778231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1456</th>\n",
              "      <td>2917</td>\n",
              "      <td>219222.423400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1457</th>\n",
              "      <td>2918</td>\n",
              "      <td>184924.279659</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1458</th>\n",
              "      <td>2919</td>\n",
              "      <td>187741.866657</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-299d6921-53a8-4f17-8273-deacad350243')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-299d6921-53a8-4f17-8273-deacad350243 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-299d6921-53a8-4f17-8273-deacad350243');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04ab5d21-4925-40cc-9a91-d30625b7bc8c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04ab5d21-4925-40cc-9a91-d30625b7bc8c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04ab5d21-4925-40cc-9a91-d30625b7bc8c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2915,\n        \"max\": 2919,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2916,\n          2919,\n          2917\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SalePrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21840.133513458182,\n        \"min\": 164788.778231138,\n        \"max\": 219222.423400059,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          164788.778231138,\n          187741.866657478,\n          219222.423400059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7Ms6RfB3LEbc",
        "outputId": "0de95ae8-e2fb-4100-d06a-bbe4708b263e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Id      SalePrice\n",
              "0  1461  169277.052498\n",
              "1  1462  187758.393989\n",
              "2  1463  183583.683570\n",
              "3  1464  179317.477511\n",
              "4  1465  150730.079977"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf7f8e2b-f6c2-4df7-969c-6da6422e3fb6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1461</td>\n",
              "      <td>169277.052498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1462</td>\n",
              "      <td>187758.393989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1463</td>\n",
              "      <td>183583.683570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1464</td>\n",
              "      <td>179317.477511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1465</td>\n",
              "      <td>150730.079977</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf7f8e2b-f6c2-4df7-969c-6da6422e3fb6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cf7f8e2b-f6c2-4df7-969c-6da6422e3fb6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cf7f8e2b-f6c2-4df7-969c-6da6422e3fb6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a36b7c59-932e-41b2-bf15-6454045b4b1c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a36b7c59-932e-41b2-bf15-6454045b4b1c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a36b7c59-932e-41b2-bf15-6454045b4b1c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1459,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 421,\n        \"min\": 1461,\n        \"max\": 2919,\n        \"num_unique_values\": 1459,\n        \"samples\": [\n          2782,\n          2297,\n          1874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SalePrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16518.303050899856,\n        \"min\": 135751.318892816,\n        \"max\": 281643.976116786,\n        \"num_unique_values\": 1438,\n        \"samples\": [\n          176521.216975696,\n          171022.241447762,\n          177472.074683935\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GanCsV83LJCt",
        "outputId": "c63b5bfb-646b-4281-9601-5cb0e17f801f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1459, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PZc8KUrMLMOU",
        "outputId": "7465f0fa-5f05-43b2-d883-7baec150fa82"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1459 entries, 0 to 1458\n",
            "Data columns (total 2 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   Id         1459 non-null   int64  \n",
            " 1   SalePrice  1459 non-null   float64\n",
            "dtypes: float64(1), int64(1)\n",
            "memory usage: 22.9 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XrgCNMmjLPZV",
        "outputId": "1f45750b-a1bb-459f-ecff-dfd3c84fc7d0"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id           0\n",
              "SalePrice    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "m_4ixQ-QLdUu",
        "outputId": "7b8a5359-4288-4050-8505-8900e385e25e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Id      SalePrice\n",
              "count  1459.000000    1459.000000\n",
              "mean   2190.000000  179183.918243\n",
              "std     421.321334   16518.303051\n",
              "min    1461.000000  135751.318893\n",
              "25%    1825.500000  168703.011202\n",
              "50%    2190.000000  179208.665698\n",
              "75%    2554.500000  186789.409363\n",
              "max    2919.000000  281643.976117"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0127f3bf-fe9b-4afc-8a03-a984f9c9704c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1459.000000</td>\n",
              "      <td>1459.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2190.000000</td>\n",
              "      <td>179183.918243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>421.321334</td>\n",
              "      <td>16518.303051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1461.000000</td>\n",
              "      <td>135751.318893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1825.500000</td>\n",
              "      <td>168703.011202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2190.000000</td>\n",
              "      <td>179208.665698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2554.500000</td>\n",
              "      <td>186789.409363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2919.000000</td>\n",
              "      <td>281643.976117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0127f3bf-fe9b-4afc-8a03-a984f9c9704c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0127f3bf-fe9b-4afc-8a03-a984f9c9704c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0127f3bf-fe9b-4afc-8a03-a984f9c9704c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6815cb12-8c16-40fb-a680-41fb53802bf2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6815cb12-8c16-40fb-a680-41fb53802bf2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6815cb12-8c16-40fb-a680-41fb53802bf2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 775.531020266911,\n        \"min\": 421.32133421732476,\n        \"max\": 2919.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1459.0,\n          2190.0,\n          2554.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SalePrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92967.90160784296,\n        \"min\": 1459.0,\n        \"max\": 281643.976116786,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          179183.91824266256,\n          179208.665698449,\n          1459.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test= train_test_split(df.drop('Id',axis=1),df['Id'],test_size=0.2,random_state=0)"
      ],
      "metadata": {
        "id": "a4tlgs0zLm2F"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rf= RandomForestClassifier()\n",
        "rf.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "ZJ2Sr-WcOQh5",
        "outputId": "11b01ba1-6799-46bd-d85f-e4747ed36d38"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=rf.predict(x_test)"
      ],
      "metadata": {
        "id": "a5pdtllDObpE"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GYIuX7TQOkE4",
        "outputId": "7f1ed5e6-7bd2-4ae5-ae46-d2ea2f60bb41"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_train,rf.predict(x_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8W4SQXlbOyAL",
        "outputId": "26e16726-4c1a-4594-ce1b-10cb29e430f4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9854327335047129"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lOfjiXpWO3LH",
        "outputId": "5d6e6542-17d4-4bfb-db09-ba5234a061af"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 0, 0, 1],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       ...,\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "keEkzlCYO75U",
        "outputId": "db6d5d98-f0d4-4360-e2f5-0f805fd4e9b2"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "        1462       0.00      0.00      0.00       1.0\n",
            "        1463       0.00      0.00      0.00       1.0\n",
            "        1465       0.00      0.00      0.00       1.0\n",
            "        1466       0.00      0.00      0.00       1.0\n",
            "        1470       0.00      0.00      0.00       1.0\n",
            "        1472       0.00      0.00      0.00       0.0\n",
            "        1474       0.00      0.00      0.00       0.0\n",
            "        1475       0.00      0.00      0.00       1.0\n",
            "        1479       0.00      0.00      0.00       1.0\n",
            "        1480       0.00      0.00      0.00       1.0\n",
            "        1484       0.00      0.00      0.00       0.0\n",
            "        1488       0.00      0.00      0.00       1.0\n",
            "        1490       0.00      0.00      0.00       1.0\n",
            "        1492       0.00      0.00      0.00       1.0\n",
            "        1495       0.00      0.00      0.00       1.0\n",
            "        1499       0.00      0.00      0.00       0.0\n",
            "        1500       0.00      0.00      0.00       1.0\n",
            "        1503       0.00      0.00      0.00       0.0\n",
            "        1504       0.00      0.00      0.00       0.0\n",
            "        1505       0.00      0.00      0.00       0.0\n",
            "        1506       0.00      0.00      0.00       1.0\n",
            "        1508       0.00      0.00      0.00       1.0\n",
            "        1512       0.00      0.00      0.00       0.0\n",
            "        1513       0.00      0.00      0.00       1.0\n",
            "        1514       0.00      0.00      0.00       1.0\n",
            "        1515       0.00      0.00      0.00       1.0\n",
            "        1516       0.00      0.00      0.00       1.0\n",
            "        1517       0.00      0.00      0.00       1.0\n",
            "        1519       0.00      0.00      0.00       1.0\n",
            "        1522       0.00      0.00      0.00       1.0\n",
            "        1524       0.00      0.00      0.00       0.0\n",
            "        1541       0.00      0.00      0.00       1.0\n",
            "        1546       0.00      0.00      0.00       1.0\n",
            "        1548       0.00      0.00      0.00       0.0\n",
            "        1550       0.00      0.00      0.00       1.0\n",
            "        1552       0.00      0.00      0.00       0.0\n",
            "        1557       0.00      0.00      0.00       1.0\n",
            "        1560       0.00      0.00      0.00       0.0\n",
            "        1566       0.00      0.00      0.00       0.0\n",
            "        1568       0.00      0.00      0.00       1.0\n",
            "        1569       0.00      0.00      0.00       1.0\n",
            "        1574       0.00      0.00      0.00       1.0\n",
            "        1579       0.00      0.00      0.00       0.0\n",
            "        1580       0.00      0.00      0.00       0.0\n",
            "        1583       0.00      0.00      0.00       1.0\n",
            "        1584       0.00      0.00      0.00       0.0\n",
            "        1585       0.00      0.00      0.00       1.0\n",
            "        1586       0.00      0.00      0.00       0.0\n",
            "        1588       0.00      0.00      0.00       0.0\n",
            "        1593       0.00      0.00      0.00       0.0\n",
            "        1596       0.00      0.00      0.00       0.0\n",
            "        1599       0.00      0.00      0.00       0.0\n",
            "        1600       0.00      0.00      0.00       0.0\n",
            "        1601       0.00      0.00      0.00       1.0\n",
            "        1602       0.00      0.00      0.00       1.0\n",
            "        1603       0.00      0.00      0.00       1.0\n",
            "        1607       0.00      0.00      0.00       0.0\n",
            "        1609       0.00      0.00      0.00       1.0\n",
            "        1613       0.00      0.00      0.00       1.0\n",
            "        1618       0.00      0.00      0.00       0.0\n",
            "        1620       0.00      0.00      0.00       1.0\n",
            "        1621       0.00      0.00      0.00       0.0\n",
            "        1622       0.00      0.00      0.00       1.0\n",
            "        1632       0.00      0.00      0.00       0.0\n",
            "        1636       0.00      0.00      0.00       1.0\n",
            "        1640       0.00      0.00      0.00       0.0\n",
            "        1643       0.00      0.00      0.00       1.0\n",
            "        1645       0.00      0.00      0.00       1.0\n",
            "        1648       0.00      0.00      0.00       0.0\n",
            "        1652       0.00      0.00      0.00       0.0\n",
            "        1653       0.00      0.00      0.00       1.0\n",
            "        1654       0.00      0.00      0.00       0.0\n",
            "        1658       0.00      0.00      0.00       0.0\n",
            "        1659       0.00      0.00      0.00       1.0\n",
            "        1662       0.00      0.00      0.00       0.0\n",
            "        1663       0.00      0.00      0.00       1.0\n",
            "        1665       0.00      0.00      0.00       1.0\n",
            "        1667       0.00      0.00      0.00       0.0\n",
            "        1668       0.00      0.00      0.00       0.0\n",
            "        1670       0.00      0.00      0.00       0.0\n",
            "        1671       0.00      0.00      0.00       0.0\n",
            "        1672       0.00      0.00      0.00       1.0\n",
            "        1676       0.00      0.00      0.00       1.0\n",
            "        1682       0.00      0.00      0.00       0.0\n",
            "        1684       0.00      0.00      0.00       1.0\n",
            "        1685       0.00      0.00      0.00       1.0\n",
            "        1688       0.00      0.00      0.00       1.0\n",
            "        1692       0.00      0.00      0.00       1.0\n",
            "        1694       0.00      0.00      0.00       1.0\n",
            "        1701       0.00      0.00      0.00       0.0\n",
            "        1702       0.00      0.00      0.00       1.0\n",
            "        1705       0.00      0.00      0.00       0.0\n",
            "        1714       0.00      0.00      0.00       1.0\n",
            "        1715       0.00      0.00      0.00       1.0\n",
            "        1721       0.00      0.00      0.00       1.0\n",
            "        1725       0.00      0.00      0.00       0.0\n",
            "        1728       0.00      0.00      0.00       0.0\n",
            "        1729       0.00      0.00      0.00       1.0\n",
            "        1731       0.00      0.00      0.00       1.0\n",
            "        1732       0.00      0.00      0.00       0.0\n",
            "        1738       0.00      0.00      0.00       0.0\n",
            "        1739       0.00      0.00      0.00       1.0\n",
            "        1740       0.00      0.00      0.00       1.0\n",
            "        1743       0.00      0.00      0.00       0.0\n",
            "        1746       0.00      0.00      0.00       0.0\n",
            "        1749       0.00      0.00      0.00       0.0\n",
            "        1756       0.00      0.00      0.00       1.0\n",
            "        1759       0.00      0.00      0.00       1.0\n",
            "        1760       0.00      0.00      0.00       1.0\n",
            "        1763       0.00      0.00      0.00       1.0\n",
            "        1764       0.00      0.00      0.00       1.0\n",
            "        1768       0.00      0.00      0.00       0.0\n",
            "        1769       0.00      0.00      0.00       1.0\n",
            "        1771       0.00      0.00      0.00       1.0\n",
            "        1773       0.00      0.00      0.00       1.0\n",
            "        1776       0.00      0.00      0.00       1.0\n",
            "        1778       0.00      0.00      0.00       1.0\n",
            "        1780       0.00      0.00      0.00       0.0\n",
            "        1783       0.00      0.00      0.00       1.0\n",
            "        1787       0.00      0.00      0.00       1.0\n",
            "        1791       0.00      0.00      0.00       1.0\n",
            "        1794       0.00      0.00      0.00       1.0\n",
            "        1799       0.00      0.00      0.00       0.0\n",
            "        1800       0.00      0.00      0.00       0.0\n",
            "        1801       0.00      0.00      0.00       0.0\n",
            "        1803       0.00      0.00      0.00       1.0\n",
            "        1804       0.00      0.00      0.00       0.0\n",
            "        1814       0.00      0.00      0.00       1.0\n",
            "        1815       0.00      0.00      0.00       0.0\n",
            "        1818       0.00      0.00      0.00       0.0\n",
            "        1822       0.00      0.00      0.00       1.0\n",
            "        1823       0.00      0.00      0.00       1.0\n",
            "        1825       0.00      0.00      0.00       1.0\n",
            "        1837       0.00      0.00      0.00       1.0\n",
            "        1840       0.00      0.00      0.00       0.0\n",
            "        1842       0.00      0.00      0.00       1.0\n",
            "        1843       0.00      0.00      0.00       0.0\n",
            "        1845       0.00      0.00      0.00       0.0\n",
            "        1851       0.00      0.00      0.00       1.0\n",
            "        1854       0.00      0.00      0.00       1.0\n",
            "        1855       0.00      0.00      0.00       0.0\n",
            "        1856       0.00      0.00      0.00       0.0\n",
            "        1862       0.00      0.00      0.00       0.0\n",
            "        1863       0.00      0.00      0.00       0.0\n",
            "        1868       0.00      0.00      0.00       0.0\n",
            "        1871       0.00      0.00      0.00       0.0\n",
            "        1873       0.00      0.00      0.00       1.0\n",
            "        1874       0.00      0.00      0.00       0.0\n",
            "        1876       0.00      0.00      0.00       0.0\n",
            "        1883       0.00      0.00      0.00       0.0\n",
            "        1886       0.00      0.00      0.00       1.0\n",
            "        1887       0.00      0.00      0.00       1.0\n",
            "        1888       0.00      0.00      0.00       1.0\n",
            "        1890       0.00      0.00      0.00       0.0\n",
            "        1892       0.00      0.00      0.00       1.0\n",
            "        1895       0.00      0.00      0.00       1.0\n",
            "        1896       0.00      0.00      0.00       0.0\n",
            "        1901       0.00      0.00      0.00       1.0\n",
            "        1904       0.00      0.00      0.00       1.0\n",
            "        1905       0.00      0.00      0.00       0.0\n",
            "        1906       0.00      0.00      0.00       1.0\n",
            "        1907       0.00      0.00      0.00       1.0\n",
            "        1908       0.00      0.00      0.00       0.0\n",
            "        1910       0.00      0.00      0.00       0.0\n",
            "        1912       0.00      0.00      0.00       0.0\n",
            "        1919       0.00      0.00      0.00       1.0\n",
            "        1920       0.00      0.00      0.00       1.0\n",
            "        1922       0.00      0.00      0.00       1.0\n",
            "        1923       0.00      0.00      0.00       0.0\n",
            "        1924       0.00      0.00      0.00       0.0\n",
            "        1925       0.00      0.00      0.00       0.0\n",
            "        1926       0.00      0.00      0.00       1.0\n",
            "        1928       0.00      0.00      0.00       1.0\n",
            "        1932       0.00      0.00      0.00       1.0\n",
            "        1935       0.00      0.00      0.00       1.0\n",
            "        1937       0.00      0.00      0.00       0.0\n",
            "        1938       0.00      0.00      0.00       0.0\n",
            "        1939       0.00      0.00      0.00       0.0\n",
            "        1940       0.00      0.00      0.00       1.0\n",
            "        1943       0.00      0.00      0.00       1.0\n",
            "        1944       0.00      0.00      0.00       1.0\n",
            "        1946       0.00      0.00      0.00       0.0\n",
            "        1947       0.00      0.00      0.00       1.0\n",
            "        1949       0.00      0.00      0.00       0.0\n",
            "        1950       0.00      0.00      0.00       1.0\n",
            "        1952       0.00      0.00      0.00       0.0\n",
            "        1955       0.00      0.00      0.00       1.0\n",
            "        1959       0.00      0.00      0.00       0.0\n",
            "        1961       0.00      0.00      0.00       1.0\n",
            "        1962       0.00      0.00      0.00       1.0\n",
            "        1964       0.00      0.00      0.00       0.0\n",
            "        1966       0.00      0.00      0.00       1.0\n",
            "        1967       0.00      0.00      0.00       0.0\n",
            "        1968       0.00      0.00      0.00       0.0\n",
            "        1970       0.00      0.00      0.00       0.0\n",
            "        1973       0.00      0.00      0.00       1.0\n",
            "        1974       0.00      0.00      0.00       1.0\n",
            "        1978       0.00      0.00      0.00       1.0\n",
            "        1980       0.00      0.00      0.00       1.0\n",
            "        1981       0.00      0.00      0.00       1.0\n",
            "        1982       0.00      0.00      0.00       0.0\n",
            "        1985       0.00      0.00      0.00       0.0\n",
            "        1990       0.00      0.00      0.00       1.0\n",
            "        1991       0.00      0.00      0.00       1.0\n",
            "        1996       0.00      0.00      0.00       1.0\n",
            "        2000       0.00      0.00      0.00       1.0\n",
            "        2001       0.00      0.00      0.00       0.0\n",
            "        2007       0.00      0.00      0.00       1.0\n",
            "        2010       0.00      0.00      0.00       1.0\n",
            "        2015       0.00      0.00      0.00       1.0\n",
            "        2018       0.00      0.00      0.00       1.0\n",
            "        2019       0.00      0.00      0.00       1.0\n",
            "        2022       0.00      0.00      0.00       0.0\n",
            "        2026       0.00      0.00      0.00       1.0\n",
            "        2027       0.00      0.00      0.00       0.0\n",
            "        2029       0.00      0.00      0.00       1.0\n",
            "        2030       0.00      0.00      0.00       1.0\n",
            "        2033       0.00      0.00      0.00       1.0\n",
            "        2035       0.00      0.00      0.00       1.0\n",
            "        2038       0.00      0.00      0.00       0.0\n",
            "        2039       0.00      0.00      0.00       0.0\n",
            "        2040       0.00      0.00      0.00       1.0\n",
            "        2041       0.00      0.00      0.00       0.0\n",
            "        2044       0.00      0.00      0.00       1.0\n",
            "        2056       0.00      0.00      0.00       0.0\n",
            "        2061       0.00      0.00      0.00       0.0\n",
            "        2064       0.00      0.00      0.00       0.0\n",
            "        2069       0.00      0.00      0.00       1.0\n",
            "        2071       0.00      0.00      0.00       1.0\n",
            "        2074       0.00      0.00      0.00       0.0\n",
            "        2076       0.00      0.00      0.00       1.0\n",
            "        2077       0.00      0.00      0.00       0.0\n",
            "        2079       0.00      0.00      0.00       1.0\n",
            "        2081       0.00      0.00      0.00       1.0\n",
            "        2082       0.00      0.00      0.00       1.0\n",
            "        2084       0.00      0.00      0.00       0.0\n",
            "        2087       0.00      0.00      0.00       0.0\n",
            "        2088       0.00      0.00      0.00       0.0\n",
            "        2089       0.00      0.00      0.00       0.0\n",
            "        2090       0.00      0.00      0.00       0.0\n",
            "        2091       0.00      0.00      0.00       0.0\n",
            "        2092       0.00      0.00      0.00       0.0\n",
            "        2093       0.00      0.00      0.00       1.0\n",
            "        2100       0.00      0.00      0.00       0.0\n",
            "        2101       0.00      0.00      0.00       0.0\n",
            "        2102       0.00      0.00      0.00       1.0\n",
            "        2103       0.00      0.00      0.00       1.0\n",
            "        2107       0.00      0.00      0.00       1.0\n",
            "        2108       0.00      0.00      0.00       0.0\n",
            "        2109       0.00      0.00      0.00       1.0\n",
            "        2110       0.00      0.00      0.00       1.0\n",
            "        2119       0.00      0.00      0.00       0.0\n",
            "        2121       0.00      0.00      0.00       0.0\n",
            "        2123       0.00      0.00      0.00       1.0\n",
            "        2145       0.00      0.00      0.00       0.0\n",
            "        2147       0.00      0.00      0.00       0.0\n",
            "        2154       0.00      0.00      0.00       1.0\n",
            "        2164       0.00      0.00      0.00       0.0\n",
            "        2165       0.00      0.00      0.00       0.0\n",
            "        2166       0.00      0.00      0.00       0.0\n",
            "        2171       0.00      0.00      0.00       0.0\n",
            "        2172       0.00      0.00      0.00       1.0\n",
            "        2174       0.00      0.00      0.00       0.0\n",
            "        2179       0.00      0.00      0.00       0.0\n",
            "        2180       0.00      0.00      0.00       0.0\n",
            "        2186       0.00      0.00      0.00       1.0\n",
            "        2188       0.00      0.00      0.00       0.0\n",
            "        2192       0.00      0.00      0.00       0.0\n",
            "        2194       0.00      0.00      0.00       1.0\n",
            "        2195       0.00      0.00      0.00       0.0\n",
            "        2198       0.00      0.00      0.00       1.0\n",
            "        2201       0.00      0.00      0.00       1.0\n",
            "        2207       0.00      0.00      0.00       1.0\n",
            "        2208       0.00      0.00      0.00       0.0\n",
            "        2212       0.00      0.00      0.00       1.0\n",
            "        2214       0.00      0.00      0.00       0.0\n",
            "        2223       0.00      0.00      0.00       1.0\n",
            "        2226       0.00      0.00      0.00       0.0\n",
            "        2228       0.00      0.00      0.00       0.0\n",
            "        2229       0.00      0.00      0.00       1.0\n",
            "        2230       0.00      0.00      0.00       1.0\n",
            "        2231       0.00      0.00      0.00       0.0\n",
            "        2234       0.00      0.00      0.00       0.0\n",
            "        2237       0.00      0.00      0.00       1.0\n",
            "        2242       0.00      0.00      0.00       0.0\n",
            "        2244       0.00      0.00      0.00       1.0\n",
            "        2245       0.00      0.00      0.00       1.0\n",
            "        2246       0.00      0.00      0.00       1.0\n",
            "        2248       0.00      0.00      0.00       0.0\n",
            "        2252       0.00      0.00      0.00       0.0\n",
            "        2253       0.00      0.00      0.00       1.0\n",
            "        2254       0.00      0.00      0.00       0.0\n",
            "        2255       0.00      0.00      0.00       0.0\n",
            "        2262       0.00      0.00      0.00       1.0\n",
            "        2271       0.00      0.00      0.00       1.0\n",
            "        2281       0.00      0.00      0.00       1.0\n",
            "        2284       0.00      0.00      0.00       1.0\n",
            "        2285       0.00      0.00      0.00       1.0\n",
            "        2287       0.00      0.00      0.00       0.0\n",
            "        2290       0.00      0.00      0.00       1.0\n",
            "        2292       0.00      0.00      0.00       1.0\n",
            "        2296       0.00      0.00      0.00       0.0\n",
            "        2302       0.00      0.00      0.00       0.0\n",
            "        2306       0.00      0.00      0.00       0.0\n",
            "        2307       0.00      0.00      0.00       1.0\n",
            "        2308       0.00      0.00      0.00       0.0\n",
            "        2314       0.00      0.00      0.00       1.0\n",
            "        2318       0.00      0.00      0.00       1.0\n",
            "        2323       0.00      0.00      0.00       1.0\n",
            "        2324       0.00      0.00      0.00       1.0\n",
            "        2326       0.00      0.00      0.00       0.0\n",
            "        2327       0.00      0.00      0.00       0.0\n",
            "        2330       0.00      0.00      0.00       0.0\n",
            "        2334       0.00      0.00      0.00       0.0\n",
            "        2340       0.00      0.00      0.00       1.0\n",
            "        2341       0.00      0.00      0.00       0.0\n",
            "        2344       0.00      0.00      0.00       0.0\n",
            "        2347       0.00      0.00      0.00       0.0\n",
            "        2350       0.00      0.00      0.00       0.0\n",
            "        2352       0.00      0.00      0.00       1.0\n",
            "        2354       0.00      0.00      0.00       1.0\n",
            "        2355       0.00      0.00      0.00       0.0\n",
            "        2357       0.00      0.00      0.00       1.0\n",
            "        2360       0.00      0.00      0.00       1.0\n",
            "        2363       0.00      0.00      0.00       0.0\n",
            "        2365       0.00      0.00      0.00       1.0\n",
            "        2366       0.00      0.00      0.00       1.0\n",
            "        2370       0.00      0.00      0.00       0.0\n",
            "        2371       0.00      0.00      0.00       0.0\n",
            "        2372       0.00      0.00      0.00       1.0\n",
            "        2375       0.00      0.00      0.00       1.0\n",
            "        2376       0.00      0.00      0.00       1.0\n",
            "        2381       0.00      0.00      0.00       0.0\n",
            "        2382       0.00      0.00      0.00       0.0\n",
            "        2385       0.00      0.00      0.00       1.0\n",
            "        2387       0.00      0.00      0.00       0.0\n",
            "        2388       0.00      0.00      0.00       1.0\n",
            "        2390       0.00      0.00      0.00       0.0\n",
            "        2391       0.00      0.00      0.00       1.0\n",
            "        2396       0.00      0.00      0.00       0.0\n",
            "        2401       0.00      0.00      0.00       0.0\n",
            "        2402       0.00      0.00      0.00       0.0\n",
            "        2404       0.00      0.00      0.00       0.0\n",
            "        2405       0.00      0.00      0.00       1.0\n",
            "        2414       0.00      0.00      0.00       0.0\n",
            "        2415       0.00      0.00      0.00       0.0\n",
            "        2416       0.00      0.00      0.00       1.0\n",
            "        2420       0.00      0.00      0.00       1.0\n",
            "        2421       0.00      0.00      0.00       1.0\n",
            "        2422       0.00      0.00      0.00       0.0\n",
            "        2423       0.00      0.00      0.00       1.0\n",
            "        2424       0.00      0.00      0.00       1.0\n",
            "        2429       0.00      0.00      0.00       1.0\n",
            "        2431       0.00      0.00      0.00       0.0\n",
            "        2433       0.00      0.00      0.00       0.0\n",
            "        2434       0.00      0.00      0.00       0.0\n",
            "        2435       0.00      0.00      0.00       1.0\n",
            "        2437       0.00      0.00      0.00       0.0\n",
            "        2441       0.00      0.00      0.00       1.0\n",
            "        2442       0.00      0.00      0.00       0.0\n",
            "        2443       0.00      0.00      0.00       1.0\n",
            "        2446       0.00      0.00      0.00       1.0\n",
            "        2447       0.00      0.00      0.00       1.0\n",
            "        2448       0.00      0.00      0.00       0.0\n",
            "        2449       0.00      0.00      0.00       1.0\n",
            "        2454       0.00      0.00      0.00       0.0\n",
            "        2455       0.00      0.00      0.00       1.0\n",
            "        2456       0.00      0.00      0.00       1.0\n",
            "        2458       0.00      0.00      0.00       1.0\n",
            "        2460       0.00      0.00      0.00       0.0\n",
            "        2461       0.00      0.00      0.00       0.0\n",
            "        2462       0.00      0.00      0.00       1.0\n",
            "        2463       0.00      0.00      0.00       0.0\n",
            "        2464       0.00      0.00      0.00       0.0\n",
            "        2466       0.00      0.00      0.00       1.0\n",
            "        2472       0.00      0.00      0.00       1.0\n",
            "        2474       0.00      0.00      0.00       1.0\n",
            "        2475       0.00      0.00      0.00       1.0\n",
            "        2476       0.00      0.00      0.00       0.0\n",
            "        2478       0.00      0.00      0.00       0.0\n",
            "        2480       0.00      0.00      0.00       1.0\n",
            "        2484       0.00      0.00      0.00       1.0\n",
            "        2485       0.00      0.00      0.00       1.0\n",
            "        2488       0.00      0.00      0.00       1.0\n",
            "        2496       0.00      0.00      0.00       0.0\n",
            "        2499       0.00      0.00      0.00       1.0\n",
            "        2502       0.00      0.00      0.00       1.0\n",
            "        2509       0.00      0.00      0.00       0.0\n",
            "        2511       0.00      0.00      0.00       0.0\n",
            "        2515       0.00      0.00      0.00       1.0\n",
            "        2517       0.00      0.00      0.00       1.0\n",
            "        2523       0.00      0.00      0.00       0.0\n",
            "        2525       0.00      0.00      0.00       1.0\n",
            "        2526       0.00      0.00      0.00       0.0\n",
            "        2530       0.00      0.00      0.00       1.0\n",
            "        2531       0.00      0.00      0.00       1.0\n",
            "        2533       0.00      0.00      0.00       0.0\n",
            "        2535       0.00      0.00      0.00       1.0\n",
            "        2537       0.00      0.00      0.00       1.0\n",
            "        2542       0.00      0.00      0.00       1.0\n",
            "        2545       0.00      0.00      0.00       1.0\n",
            "        2546       0.00      0.00      0.00       0.0\n",
            "        2550       0.00      0.00      0.00       1.0\n",
            "        2552       0.00      0.00      0.00       0.0\n",
            "        2555       0.00      0.00      0.00       0.0\n",
            "        2557       0.00      0.00      0.00       1.0\n",
            "        2562       0.00      0.00      0.00       1.0\n",
            "        2566       0.00      0.00      0.00       0.0\n",
            "        2568       0.00      0.00      0.00       0.0\n",
            "        2569       0.00      0.00      0.00       1.0\n",
            "        2571       0.00      0.00      0.00       0.0\n",
            "        2572       0.00      0.00      0.00       0.0\n",
            "        2573       0.00      0.00      0.00       0.0\n",
            "        2576       0.00      0.00      0.00       1.0\n",
            "        2582       0.00      0.00      0.00       1.0\n",
            "        2583       0.00      0.00      0.00       1.0\n",
            "        2584       0.00      0.00      0.00       1.0\n",
            "        2587       0.00      0.00      0.00       1.0\n",
            "        2591       0.00      0.00      0.00       0.0\n",
            "        2593       0.00      0.00      0.00       1.0\n",
            "        2594       0.00      0.00      0.00       0.0\n",
            "        2598       0.00      0.00      0.00       1.0\n",
            "        2599       0.00      0.00      0.00       0.0\n",
            "        2604       0.00      0.00      0.00       0.0\n",
            "        2605       0.00      0.00      0.00       0.0\n",
            "        2608       0.00      0.00      0.00       1.0\n",
            "        2610       0.00      0.00      0.00       1.0\n",
            "        2611       0.00      0.00      0.00       0.0\n",
            "        2618       0.00      0.00      0.00       1.0\n",
            "        2619       0.00      0.00      0.00       0.0\n",
            "        2624       0.00      0.00      0.00       1.0\n",
            "        2626       0.00      0.00      0.00       1.0\n",
            "        2639       0.00      0.00      0.00       0.0\n",
            "        2645       0.00      0.00      0.00       0.0\n",
            "        2651       0.00      0.00      0.00       0.0\n",
            "        2652       0.00      0.00      0.00       1.0\n",
            "        2658       0.00      0.00      0.00       1.0\n",
            "        2660       0.00      0.00      0.00       1.0\n",
            "        2666       0.00      0.00      0.00       0.0\n",
            "        2668       0.00      0.00      0.00       0.0\n",
            "        2671       0.00      0.00      0.00       1.0\n",
            "        2674       0.00      0.00      0.00       1.0\n",
            "        2676       0.00      0.00      0.00       0.0\n",
            "        2679       0.00      0.00      0.00       1.0\n",
            "        2683       0.00      0.00      0.00       1.0\n",
            "        2684       0.00      0.00      0.00       1.0\n",
            "        2685       0.00      0.00      0.00       1.0\n",
            "        2688       0.00      0.00      0.00       0.0\n",
            "        2697       0.00      0.00      0.00       1.0\n",
            "        2702       0.00      0.00      0.00       0.0\n",
            "        2705       0.00      0.00      0.00       1.0\n",
            "        2706       0.00      0.00      0.00       0.0\n",
            "        2715       0.00      0.00      0.00       0.0\n",
            "        2717       0.00      0.00      0.00       1.0\n",
            "        2718       0.00      0.00      0.00       0.0\n",
            "        2720       0.00      0.00      0.00       1.0\n",
            "        2722       0.00      0.00      0.00       0.0\n",
            "        2724       0.00      0.00      0.00       1.0\n",
            "        2725       0.00      0.00      0.00       1.0\n",
            "        2728       0.00      0.00      0.00       1.0\n",
            "        2730       0.00      0.00      0.00       0.0\n",
            "        2734       0.00      0.00      0.00       1.0\n",
            "        2739       0.00      0.00      0.00       0.0\n",
            "        2742       0.00      0.00      0.00       1.0\n",
            "        2744       0.00      0.00      0.00       1.0\n",
            "        2745       0.00      0.00      0.00       0.0\n",
            "        2746       0.00      0.00      0.00       0.0\n",
            "        2751       0.00      0.00      0.00       0.0\n",
            "        2756       0.00      0.00      0.00       1.0\n",
            "        2758       0.00      0.00      0.00       1.0\n",
            "        2759       0.00      0.00      0.00       0.0\n",
            "        2760       0.00      0.00      0.00       1.0\n",
            "        2766       0.00      0.00      0.00       1.0\n",
            "        2767       0.00      0.00      0.00       1.0\n",
            "        2768       0.00      0.00      0.00       1.0\n",
            "        2777       0.00      0.00      0.00       0.0\n",
            "        2778       0.00      0.00      0.00       1.0\n",
            "        2781       0.00      0.00      0.00       0.0\n",
            "        2782       0.00      0.00      0.00       1.0\n",
            "        2784       0.00      0.00      0.00       0.0\n",
            "        2785       0.00      0.00      0.00       1.0\n",
            "        2787       0.00      0.00      0.00       0.0\n",
            "        2792       0.00      0.00      0.00       1.0\n",
            "        2794       0.00      0.00      0.00       1.0\n",
            "        2798       0.00      0.00      0.00       1.0\n",
            "        2799       0.00      0.00      0.00       0.0\n",
            "        2808       0.00      0.00      0.00       1.0\n",
            "        2810       0.00      0.00      0.00       1.0\n",
            "        2811       0.00      0.00      0.00       1.0\n",
            "        2815       0.00      0.00      0.00       1.0\n",
            "        2817       0.00      0.00      0.00       0.0\n",
            "        2818       0.00      0.00      0.00       1.0\n",
            "        2820       0.00      0.00      0.00       0.0\n",
            "        2822       0.00      0.00      0.00       1.0\n",
            "        2824       0.00      0.00      0.00       0.0\n",
            "        2826       0.00      0.00      0.00       0.0\n",
            "        2827       0.00      0.00      0.00       0.0\n",
            "        2829       0.00      0.00      0.00       0.0\n",
            "        2831       0.00      0.00      0.00       0.0\n",
            "        2833       0.00      0.00      0.00       0.0\n",
            "        2834       0.00      0.00      0.00       0.0\n",
            "        2836       0.00      0.00      0.00       0.0\n",
            "        2837       0.00      0.00      0.00       1.0\n",
            "        2838       0.00      0.00      0.00       1.0\n",
            "        2839       0.00      0.00      0.00       0.0\n",
            "        2840       0.00      0.00      0.00       0.0\n",
            "        2842       0.00      0.00      0.00       1.0\n",
            "        2843       0.00      0.00      0.00       1.0\n",
            "        2844       0.00      0.00      0.00       0.0\n",
            "        2846       0.00      0.00      0.00       1.0\n",
            "        2850       0.00      0.00      0.00       1.0\n",
            "        2853       0.00      0.00      0.00       0.0\n",
            "        2855       0.00      0.00      0.00       1.0\n",
            "        2861       0.00      0.00      0.00       0.0\n",
            "        2863       0.00      0.00      0.00       0.0\n",
            "        2864       0.00      0.00      0.00       1.0\n",
            "        2866       0.00      0.00      0.00       0.0\n",
            "        2867       0.00      0.00      0.00       0.0\n",
            "        2869       0.00      0.00      0.00       0.0\n",
            "        2872       0.00      0.00      0.00       1.0\n",
            "        2875       0.00      0.00      0.00       1.0\n",
            "        2880       0.00      0.00      0.00       1.0\n",
            "        2881       0.00      0.00      0.00       0.0\n",
            "        2883       0.00      0.00      0.00       1.0\n",
            "        2885       0.00      0.00      0.00       0.0\n",
            "        2886       0.00      0.00      0.00       0.0\n",
            "        2887       0.00      0.00      0.00       0.0\n",
            "        2890       0.00      0.00      0.00       1.0\n",
            "        2897       0.00      0.00      0.00       0.0\n",
            "        2902       0.00      0.00      0.00       1.0\n",
            "        2903       0.00      0.00      0.00       0.0\n",
            "        2905       0.00      0.00      0.00       0.0\n",
            "        2908       0.00      0.00      0.00       0.0\n",
            "        2909       0.00      0.00      0.00       1.0\n",
            "        2910       0.00      0.00      0.00       1.0\n",
            "        2911       0.00      0.00      0.00       0.0\n",
            "        2912       0.00      0.00      0.00       1.0\n",
            "        2916       0.00      0.00      0.00       1.0\n",
            "        2917       0.00      0.00      0.00       1.0\n",
            "        2919       0.00      0.00      0.00       0.0\n",
            "\n",
            "    accuracy                           0.00     292.0\n",
            "   macro avg       0.00      0.00      0.00     292.0\n",
            "weighted avg       0.00      0.00      0.00     292.0\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.heatmap(df.corr(),annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "1fU7yzQGPMnI",
        "outputId": "59917c2a-3a60-485f-a7fd-93e380d6fa0a"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "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+2pAet9glwE0CS7Gb7wbv3nzzTfVv39/Pfvss1q0aJGGDBmip59+OlC1AWcUFham3r17qGjdBvc5l8ulonUbdcUVqX55RkhIiP7zP29W8+ZR+viTYr+sCQAAEAheNfV2u12jR4/W8ePHdezYMc2YMUOzZs0KVG3AGcXGtlGzZs10pKzC4/yRI+VKiG97Tmt3795NP3y/V6dOHtDzzz2pO+4cpV27vjqnNQEAQOAwU+9lU79nzx499thjCg0NlSQ9+uijOnHihI4cOeLVQx0OhyorKz0Ol4u/NkHTsGfPPqX2vU5X9r9JL760XEsW5+uyy34V7LIAAADOyKum/tSpU2rZsqX76/DwcEVEROjkyZNePdRutysmJsbjcDlPeLUGLmwVFd/r9OnTiouP9TgfF9dWpWXl57R2TU2N9u37Rlu37dSkyU9qx44vNe7BujvlAACApsEV4H9M4PWLsosWLVJ0dLT769OnT2vp0qWKjf2luTrbPvU5OTmy2Wwe51pf1M3bUnABq6mp0datO/Trq6/S6tV/kSRZLBb9+uqr9PwLL/v1WSEhIbJaw/26JgAAgD951dRffPHFWrhwoce5hIQErVixwv21xWI5a1NvtVpltVo9zlksFm9KAfTMswv18uJnVLx1hz79dJseGjdazZtHaumylZKkl5c8q+++O6xJk5+U9PPLtcnJl0qSwsPDlJSYoJ49/59OnqzSvn3fSJJmzpiowsK/6eA/DqlFi2j95q5hGjQoXTcOuTsoPyMAnMmpUz/q4D+/c3996Lsy7d67TzEtW6hdQlwQKwP+/UyZew8kr5r6b775JkBlAN57443VahvbRk/kPqaEhLbavv0LDbnptzpy5OeXZy9unyin85f/mScmxqv407+6v3700TF69NEx+vDDTbrm2jslSW3bxurlJc+qXbs4HT9+Qjt37tKNQ+7WB0UbBABNyee7v9Lvxk1wf/3U/JckSbfckKGZkx8NVllAUDh5N1MW1zm+ofrTTz8pIiLinAtpFp50zmsAQFPy43f8xyCA80tYbKdgl1CvezrcFtD1V3y7KqDr+4NXL8r+S21traZPn66kpCRFR0dr//79kqQpU6Zo8eLFfi0QAAAAaIgrwIcJfGrqZ86cqaVLl+qpp55SePgvLxB2795dixYt8ltxAAAAAM7Op6Z++fLleumllzRixAj3nvWS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AAAARiOpp6kHAACA4WjpGb8BAAAAjGdx8fcVuIA4HA7Z7Xbl5OTIarUGuxwAOGf8uQZAoqnHBaayslIxMTE6fvy4WrZsGexyAOCc8ecaAInxGwAAAMB4NPUAAACA4WjqAQAAAMPR1OOCYrValZeXx8tkAM4b/LkGQOJFWQAAAMB4JPUAAACA4WjqAQAAAMPR1AMAAACGo6nHBW3w4MH6wx/+EOwyAECStHTpUrVq1Srgz/nmm29ksVhUUlIS8GcB+Pegqcd57d5779WwYcOCXQaAC0R5ebnGjBmjiy++WFarVQkJCcrMzNTf//73gD2zY8eOslgsslgsat68uXr37q033nijwXvat2+vw4cPq3v37gGrC8C/F009AAB+cvvtt2vbtm1atmyZ9u7dq9WrV2vw4ME6evRoQJ87bdo0HT58WNu2bVPfvn01fPhwbdq0qd5rq6urFRoaqoSEBDVr1iygdQH496GpxwWjqqpKWVlZio6OVrt27TR37txglwTgPPLDDz9ow4YNmj17tq6++mp16NBB/fr1U05Ojm6++WZJ0rx583T55ZerefPmat++vR544AGdPHmywXXfeecd9e7dWxEREerUqZOmTp2q06dPe1zTokULJSQk6NJLL9WCBQsUGRmpNWvWSPo5yZ8+fbqysrLUsmVL/f73v693/OaLL77QTTfdpJYtW6pFixYaMGCA9u3b5/7+okWLdNlllykiIkLdunXT888/76ffHAB/oKnHBWP8+PH68MMP9c477+ivf/2r1q9fr61btwa7LADniejoaEVHR+vtt9+Ww+Go95qQkBD96U9/0hdffKFly5Zp3bp1evzxx8+45oYNG5SVlaWHH35YX375pV588UUtXbpUM2fOPOM9zZo1U1hYmKqrq93nnn76afXs2VPbtm3TlClT6txz6NAhDRw4UFarVevWrVNxcbF+97vfuf/j4c9//rNyc3M1c+ZM7dq1S7NmzdKUKVO0bNmyxv56AASaCziPjRw50nXLLbe4Tpw44QoPD3e9/vrr7u8dPXrUFRkZ6Xr44YeDVyCA88qbb77pat26tSsiIsJ15ZVXunJyclzbt28/4/VvvPGG66KLLnJ//fLLL7tiYmLcX19zzTWuWbNmedyzYsUKV7t27dxfd+jQwfXMM8+4XC6Xy+FwuGbNmuWS5Hr33Xfd3x82bJjHGgcOHHBJcm3bts3lcrlcOTk5rksuucRVXV1db52dO3d2vfrqqx7npk+f7kpPTz/jzwbg34ukHheEffv2qbq6Wmlpae5zbdq0UdeuXYNYFYDzze23367vvvtOq1ev1vXXX6/169erd+/eWrp0qSTpgw8+0DXXXKOkpCS1aNFC99xzj44ePapTp07Vu9727ds1bdo0998CREdHa/To0Tp8+LDHPRMmTFB0dLSioqI0e/ZsPfnkkxoyZIj7+3369Gmw7pKSEg0YMEBhYWF1vldVVaV9+/bpvvvu86hjxowZHuM5AIKLN2QAAPCjiIgIXXvttbr22ms1ZcoUjRo1Snl5eRo8eLBuuukmjRkzRjNnzlSbNm20ceNG3XfffaqurlZUVFSdtU6ePKmpU6fqtttuq/c5/zJ+/Hjde++9io6OVnx8vCwWi8e1zZs3b7DmyMjIM37vXzP/Cxcu9AhGJCk0NLTBdQH8+9DU44LQuXNnhYWF6ZNPPtHFF18sSTp27Jj27t2rQYMGBbk6AOez5ORkvf322youLpbT6dTcuXMVEvLzX5S//vrrDd7bu3dv7dmzR126dGnwutjY2LNe05AePXpo2bJlqqmpqZPWx8fHKzExUfv379eIESN8fgaAwKKpxwUhOjpa9913n8aPH6+LLrpIcXFxmjRpkvv/WAHgXB09elR33nmnfve736lHjx5q0aKFPvvsMz311FO65ZZb1KVLF9XU1Gj+/PkaOnSo/v73v6ugoKDBNXNzc3XTTTfp4osv1h133KGQkBBt375dn3/+uWbMmOG32h988EHNnz9fd911l3JychQTE6OPP/5Y/fr1U9euXTV16lQ99NBDiomJ0fXXXy+Hw6HPPvtMx44dk81m81sdAHxHU48Lxpw5c3Ty5EkNHTpULVq00KOPPqrjx48HuywA54no6GilpaXpmWee0b59+1RTU6P27dtr9OjR+uMf/6jIyEjNmzdPs2fPVk5OjgYOHCi73a6srKwzrpmZmal3331X06ZN0+zZsxUWFqZu3bpp1KhRfq39oosu0rp16zR+/HgNGjRIoaGhSklJUf/+/SVJo0aNUlRUlObMmaPx48erefPmuvzyy/lEbqAJsbhcLlewiwAAAADgO2YPAAAAAMPR1AMAAACGo6kHAAAADEdTDwAAABiOph4AAAAwHE09AAAAYDiaegAAAMBwNPUAAACA4WjqAQAAAMPR1AMAAACGo6kHAAAADEdTDwAAABju/wc36rZ2SbCVXwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.distplot(df['SalePrice'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "id": "uxLtcDbpPQyP",
        "outputId": "6bfa35b4-8543-4cc3-e316-e3afb29a5b0d"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-d1f4a81ddad8>:2: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(df['SalePrice'])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='SalePrice', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}